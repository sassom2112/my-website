---
import Layout from '../../layouts/Layout.astro'; 
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';

// 1. getStaticPaths: Generates a page for every entry in the 'writeups' collection
export async function getStaticPaths() {
    const writeups = await getCollection('writeups');
    
    return writeups.map(entry => ({
        // The 'slug' here must match the filename of the MDX in src/content/writeups/
        // Astro automatically converts filenames to slugs (e.g., "credential-harvester.mdx" -> "credential-harvester")
        params: { slug: entry.slug }, 
        props: { entry },
    }));
}

// 2. Extract the entry and render the Markdown content body
const { entry } = Astro.props as { entry: CollectionEntry<'writeups'> };
const { Content } = await entry.render();
---

<Layout title={entry.data.title} description={entry.data.description}>
    <article class="writeup-article">
        <header>
            {entry.data.heroImage && (
                <img src={entry.data.heroImage} alt={entry.data.title + ' Hero Image'} class="hero-image"/>
            )}
            <h1 class="article-title">{entry.data.title}</h1>
            <p class="description">{entry.data.description}</p>
            <div class="meta">
                {entry.data.author && <p>By {entry.data.author}</p>}
                {entry.data.date && <p>Published on {new Date(entry.data.date).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                })}</p>}
            </div>
            <div class="tags">
                {entry.data.tags.map(tag => <span class="tag">{tag}</span>)}
            </div>
        </header>
        <div class="content">
            <Content /> {/* This is where your MDX content goes! */}
        </div>
    </article>
</Layout>

<style is:global>
  /* Global styles for MDX content (headings, paragraphs, code blocks) */
  .writeup-article {
    max-width: 800px;
    margin: 2rem auto;
    padding: 2rem;
    background: var(--card-background);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
  }

  .writeup-article .hero-image {
    width: 100%;
    max-height: 400px;
    object-fit: cover;
    border-radius: 6px;
    margin-bottom: 2rem;
  }

  .writeup-article .article-title {
    font-size: 2.5rem;
    color: var(--text-light);
    margin-bottom: 1rem;
    text-align: center;
  }

  .writeup-article .description { /* New style for the writeup's main description */
    color: #bbb;
    font-style: italic;
    text-align: center;
    margin-bottom: 1.5rem;
    font-size: 1.1em;
  }

  .writeup-article .meta {
    font-family: var(--font-mono);
    color: #999;
    font-size: 0.9rem;
    text-align: center;
    margin-bottom: 1.5rem;
  }

  .writeup-article .article-tags { /* Adjusted name to avoid conflict, if needed */
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.75rem;
    margin-bottom: 2rem;
  }

  .writeup-article .tag {
    /* Inherit tag style from Arsenal or define here */
    background: #3a3a3a;
    color: #ccc;
    padding: 0.4rem 0.8rem;
    border-radius: 5px;
    font-size: 0.8rem;
    border: 1px solid #555;
  }

  .writeup-article .content h1,
  .writeup-article .content h2,
  .writeup-article .content h3,
  .writeup-article .content h4,
  .writeup-article .content h5,
  .writeup-article .content h6 {
    color: var(--accent-color); /* Apply accent color to inner headings */
    margin-top: 2rem;
    margin-bottom: 1rem;
    line-height: 1.3;
  }

  .writeup-article .content h1 { font-size: 2rem; text-align: center;}
  .writeup-article .content h2 { font-size: 1.75rem; border-bottom: 1px dashed #444; padding-bottom: 0.5rem; }
  .writeup-article .content h3 { font-size: 1.5rem; }
  .writeup-article .content h4 { font-size: 1.3rem; }

  .writeup-article .content p {
    line-height: 1.8;
    margin-bottom: 1rem;
    color: #e0e0e0;
  }

  .writeup-article .content code {
    background-color: #282c34; /* Darker background for inline code */
    color: #a9b7c6;
    padding: 0.2em 0.4em;
    border-radius: 3px;
    font-family: var(--font-mono);
    font-size: 0.9em;
  }

  .writeup-article .content pre {
    background-color: #282c34; /* Dark background for code blocks */
    color: #a9b7c6;
    padding: 1rem;
    border-radius: 8px;
    overflow-x: auto;
    margin-bottom: 1.5rem;
    font-family: var(--font-mono);
    font-size: 0.9rem;
    line-height: 1.5;
  }

  .writeup-article .content ul,
  .writeup-article .content ol {
    margin-left: 1.5rem;
    margin-bottom: 1rem;
    color: #e0e0e0;
  }

  .writeup-article .content li {
    margin-bottom: 0.5rem;
  }

  .writeup-article .content a {
    color: var(--accent-color);
    text-decoration: underline;
  }

  .writeup-article .content strong {
    color: var(--text-light);
  }

  .writeup-article .content table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1.5rem;
      margin-bottom: 1.5rem;
  }

  .writeup-article .content th,
  .writeup-article .content td {
      border: 1px solid var(--border-color);
      padding: 0.8rem;
      text-align: left;
      color: #e0e0e0;
  }

  .writeup-article .content th {
      background-color: #333;
      color: var(--accent-color);
      font-weight: bold;
  }
</style>